diff --git a/node_modules/ajv/dist/compile/validate/dataType.js b/node_modules/ajv/dist/compile/validate/dataType.js
index 6d03e0d..8e19a97 100644
--- a/node_modules/ajv/dist/compile/validate/dataType.js
+++ b/node_modules/ajv/dist/compile/validate/dataType.js
@@ -94,13 +94,13 @@ function coerceData(it, types, coerceTo) {
             case "number":
                 gen
                     .elseIf((0, codegen_1._) `${dataType} == "boolean" || ${data} === null
-              || (${dataType} == "string" && ${data} && ${data} == +${data})`)
+              || (${dataType} == "string" && ${data} && ${data}.trim() && ${data} == +${data})`)
                     .assign(coerced, (0, codegen_1._) `+${data}`);
                 return;
             case "integer":
                 gen
                     .elseIf((0, codegen_1._) `${dataType} === "boolean" || ${data} === null
-              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`)
+              || (${dataType} === "string" && ${data} && ${data}.trim() && ${data} == +${data} && !(${data} % 1))`)
                     .assign(coerced, (0, codegen_1._) `+${data}`);
                 return;
             case "boolean":
diff --git a/node_modules/ajv/dist/compile/validate/index.js b/node_modules/ajv/dist/compile/validate/index.js
index 0d68332..8b4845c 100644
--- a/node_modules/ajv/dist/compile/validate/index.js
+++ b/node_modules/ajv/dist/compile/validate/index.js
@@ -13,6 +13,7 @@ const names_1 = require("../names");
 const resolve_1 = require("../resolve");
 const util_1 = require("../util");
 const errors_1 = require("../errors");
+const { strictDiscriminatorValidation } = require("../../vocabularies/discriminator");
 // schema compilation - generates validation function, subschemaCode (below) is used for subschemas
 function validateFunctionCode(it) {
     if (isSchemaObj(it)) {
@@ -258,7 +259,9 @@ function checkKeywordTypes(it, ts) {
         if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
             const { type } = rule.definition;
             if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
-                strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
+                if (keyword !== "discriminator" || strictDiscriminatorValidation(it)) {
+                    strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
+                }
             }
         }
     }
diff --git a/node_modules/ajv/dist/core.d.ts b/node_modules/ajv/dist/core.d.ts
index 4591ed9..46b5356 100644
--- a/node_modules/ajv/dist/core.d.ts
+++ b/node_modules/ajv/dist/core.d.ts
@@ -32,7 +32,7 @@ export interface CurrentOptions {
     $data?: boolean;
     allErrors?: boolean;
     verbose?: boolean;
-    discriminator?: boolean;
+    discriminator?: boolean | { strict: boolean};
     unicodeRegExp?: boolean;
     timestamp?: "string" | "date";
     parseDate?: boolean;
diff --git a/node_modules/ajv/dist/vocabularies/discriminator/index.js b/node_modules/ajv/dist/vocabularies/discriminator/index.js
index e113aed..7ee6cf5 100644
--- a/node_modules/ajv/dist/vocabularies/discriminator/index.js
+++ b/node_modules/ajv/dist/vocabularies/discriminator/index.js
@@ -25,7 +25,7 @@ const def = {
         const tagName = schema.propertyName;
         if (typeof tagName != "string")
             throw new Error("discriminator: requires propertyName");
-        if (schema.mapping)
+        if (schema.mapping && strictDiscriminatorValidation(it))
             throw new Error("discriminator: mapping is not supported");
         if (!oneOf)
             throw new Error("discriminator: requires oneOf keyword");
@@ -100,5 +100,12 @@ const def = {
         }
     },
 };
+
+function strictDiscriminatorValidation(it) {
+    if (it.opts.discriminator instanceof Object) return it.opts.discriminator.strict;
+    return true;
+}
+
+exports.strictDiscriminatorValidation = strictDiscriminatorValidation;
 exports.default = def;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
