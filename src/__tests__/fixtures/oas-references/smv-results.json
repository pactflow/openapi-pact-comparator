[
  {
    "code": "request.query.incompatible",
    "message": "Value is incompatible with the parameter defined in the spec file: must have required property 'value'",
    "mockDetails": {
      "interactionDescription": "should fail with missing parameters",
      "interactionState": "[none]",
      "location": "[root].interactions[1]",
      "value": {
        "description": "should fail with missing parameters",
        "request": {
          "method": "POST",
          "path": "/login",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "username": "bob"
          }
        },
        "response": {
          "status": 201,
          "body": {
            "id": "123"
          }
        }
      }
    },
    "specDetails": {
      "location": "[root].paths./login.post.parameters[0]",
      "pathMethod": "post",
      "pathName": "/login",
      "value": {
        "in": "query",
        "name": "account",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "type": "error"
  },
  {
    "code": "request.query.incompatible",
    "message": "Value is incompatible with the parameter defined in the spec file: must have required property 'value'",
    "mockDetails": {
      "interactionDescription": "should fail with missing parameters",
      "interactionState": "[none]",
      "location": "[root].interactions[1]",
      "value": {
        "description": "should fail with missing parameters",
        "request": {
          "method": "POST",
          "path": "/login",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "username": "bob"
          }
        },
        "response": {
          "status": 201,
          "body": {
            "id": "123"
          }
        }
      }
    },
    "specDetails": {
      "location": "[root].paths./login.post.parameters[1]",
      "pathMethod": "post",
      "pathName": "/login",
      "value": {
        "in": "query",
        "name": "nested",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "type": "error"
  },
  {
    "code": "request.query.incompatible",
    "message": "Value is incompatible with the parameter defined in the spec file: must have required property 'value'",
    "mockDetails": {
      "interactionDescription": "should fail with missing parameters",
      "interactionState": "[none]",
      "location": "[root].interactions[1]",
      "value": {
        "description": "should fail with missing parameters",
        "request": {
          "method": "POST",
          "path": "/login",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "username": "bob"
          }
        },
        "response": {
          "status": 201,
          "body": {
            "id": "123"
          }
        }
      }
    },
    "specDetails": {
      "location": "[root].paths./login.post.parameters[2]",
      "pathMethod": "post",
      "pathName": "/login",
      "value": {
        "in": "query",
        "name": "bracket",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "type": "error"
  },
  {
    "code": "request.body.incompatible",
    "message": "Request body is incompatible with the request body schema in the spec file: must have required property 'username'",
    "mockDetails": {
      "interactionDescription": "should fail with bad request body",
      "interactionState": "[none]",
      "location": "[root].interactions[2].request.body",
      "value": {}
    },
    "specDetails": {
      "location": "[root].paths./login.post.requestBody.content.application/json.schema.required",
      "pathMethod": "post",
      "pathName": "/login",
      "value": [
        "username"
      ]
    },
    "type": "error"
  },
  {
    "code": "response.header.incompatible",
    "message": "Value is incompatible with the parameter defined in the spec file: must be number",
    "mockDetails": {
      "interactionDescription": "should fail with bad response header",
      "interactionState": "[none]",
      "location": "[root].interactions[3].response.headers.response-header",
      "value": "string"
    },
    "specDetails": {
      "location": "[root].paths./login.post.responses.201.headers.response-header",
      "pathMethod": "post",
      "pathName": "/login",
      "value": {
        "required": true,
        "schema": {
          "type": "number"
        }
      }
    },
    "type": "error"
  },
  {
    "code": "response.body.incompatible",
    "message": "Response body is incompatible with the response body schema in the spec file: must NOT have additional properties - username",
    "mockDetails": {
      "interactionDescription": "should fail with bad response body",
      "interactionState": "[none]",
      "location": "[root].interactions[4].response.body",
      "value": {
        "username": "bob"
      }
    },
    "specDetails": {
      "location": "[root].paths./login.post.responses.201.content.application/json.schema.additionalProperties",
      "pathMethod": "post",
      "pathName": "/login",
      "value": false
    },
    "type": "error"
  },
  {
    "code": "request.path-or-method.unknown",
    "message": "Path or method not defined in spec file: GET /wildcards/foo",
    "mockDetails": {
      "interactionDescription": "should error (but not crash) for wildcard routes",
      "interactionState": "[none]",
      "location": "[root].interactions[5].request.path",
      "value": "/wildcards/foo"
    },
    "specDetails": {
      "location": "[root].paths",
      "pathMethod": null,
      "pathName": null,
      "value": {
        "/login": {
          "post": {
            "parameters": [
              {
                "in": "query",
                "name": "account",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "in": "query",
                "name": "nested",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "in": "query",
                "name": "bracket",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "username"
                    ]
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Response body",
                "headers": {
                  "response-header": {
                    "required": true,
                    "schema": {
                      "type": "number"
                    }
                  }
                },
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "/wildcards/**": {
          "get": {
            "responses": {
              "200": {
                "description": "description"
              }
            }
          }
        }
      }
    },
    "type": "error"
  }
]