[
  {
    "code": "request.query.incompatible",
    "message": "Value is incompatible with the parameter defined in the spec file: must be integer",
    "mockDetails": {
      "interactionDescription": "should error when exploded query parameter in object form does not match spec",
      "interactionState": "[none]",
      "location": "[root].interactions[3].request.query.id.2",
      "value": "abc"
    },
    "source": "spec-mock-validation",
    "specDetails": {
      "location": "[root].paths./explode-true.get.parameters[0].schema.items.type",
      "pathMethod": "get",
      "pathName": "/explode-true",
      "value": "integer"
    },
    "type": "error"
  },
  {
    "code": "request.query.incompatible",
    "message": "Value is incompatible with the parameter defined in the spec file: must be integer",
    "mockDetails": {
      "interactionDescription": "should error when exploded query parameter in string form does not match spec",
      "interactionState": "[none]",
      "location": "[root].interactions[4].request.query.id.2",
      "value": "abc"
    },
    "source": "spec-mock-validation",
    "specDetails": {
      "location": "[root].paths./explode-true.get.parameters[0].schema.items.type",
      "pathMethod": "get",
      "pathName": "/explode-true",
      "value": "integer"
    },
    "type": "error"
  },
  {
    "code": "request.query.incompatible",
    "message": "Value is incompatible with the parameter defined in the spec file: must be integer",
    "mockDetails": {
      "interactionDescription": "should error when non-exploded query parameter in object form does not match spec",
      "interactionState": "[none]",
      "location": "[root].interactions[5].request.query.id.2",
      "value": "abc"
    },
    "source": "spec-mock-validation",
    "specDetails": {
      "location": "[root].paths./explode-false.get.parameters[0].schema.items.type",
      "pathMethod": "get",
      "pathName": "/explode-false",
      "value": "integer"
    },
    "type": "error"
  },
  {
    "code": "request.query.incompatible",
    "message": "Value is incompatible with the parameter defined in the spec file: must be integer",
    "mockDetails": {
      "interactionDescription": "should error when non-exploded query parameter in string form does not match spec",
      "interactionState": "[none]",
      "location": "[root].interactions[6].request.query.id.2",
      "value": "abc"
    },
    "source": "spec-mock-validation",
    "specDetails": {
      "location": "[root].paths./explode-false.get.parameters[0].schema.items.type",
      "pathMethod": "get",
      "pathName": "/explode-false",
      "value": "integer"
    },
    "type": "error"
  },
  {
    "code": "request.query.unknown",
    "message": "Query parameter is not defined in the spec file: param",
    "mockDetails": {
      "interactionDescription": "should warn about unknown query parameters",
      "interactionState": "[none]",
      "location": "[root].interactions[7].request.query.param",
      "value": "unknown"
    },
    "specDetails": {
      "location": "[root].paths./unknown-params.get",
      "pathMethod": "get",
      "pathName": "/unknown-params",
      "value": {
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "age",
            "required": false,
            "schema": {
              "type": "number",
              "components": {
                "schemas": {
                  "Person": {
                    "type": "object",
                    "required": [
                      "id",
                      "name"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "id": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "address": {
                        "$ref": "#/components/schemas/Address"
                      }
                    }
                  },
                  "Address": {
                    "type": "object",
                    "required": [
                      "street",
                      "city",
                      "state",
                      "postcode"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "street": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "postcode": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "type": "warning"
  },
  {
    "code": "request.query.incompatible",
    "message": "Value is incompatible with the parameter defined in the spec file: must be number",
    "mockDetails": {
      "interactionDescription": "should error when optional query parameter is incompatible",
      "interactionState": "[none]",
      "location": "[root].interactions[8].request.query.age.",
      "value": "abc"
    },
    "source": "spec-mock-validation",
    "specDetails": {
      "location": "[root].paths./unknown-params.get.parameters[1].schema.type",
      "pathMethod": "get",
      "pathName": "/unknown-params",
      "value": "number"
    },
    "type": "error"
  }
]